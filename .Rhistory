PSTAT10db <- dbConnect(RSQLite::SQLite(), "HW_7_db.sqlite")
dbSendQuery(PSTAT10db, 'CREATE TABLE SOFT_TOYS
(Toy_ID TEXT NOT NULL PRIMARY KEY,
Toy_Name TEXT,
Color TEXT,
Price REAL,
CHECK (length("Toy_ID") <= 4)
)')
dbDisconnect(PSTAT10db)
# Practice
PSTAT10db <- dbConnect(RSQLite::SQLite(), "PSTAT10-db.sqlite")
dbWriteTable(PSTAT10db, "mtcarS", mtcars)
result_in_batches <- dbSendQuery(PSTAT10db, 'SELECT mpg FROM mtcars')
dbFetch(result_in_batches, n=10)
dbFetch(result_in_batches, n=10)
dbFetch(result_in_batches, n=10)
dbFetch(result_in_batches, n=10)
dbFetch(result_in_batches, n=10)
dbFetch(result_in_batches, n=10)
dbClearResult()
dbGetRowCount(result_in_batches)
dbClearResult(result_in_batches)
dbFetch(result_in_batches, n=10)
result_in_batches <- dbSendQuery(PSTAT10db, 'SELECT mpg FROM mtcars')
dbFetch(result_in_batches, n=10)
dbClearResult(result_in_batches)
VIEW1 <-dbSendQuery(PSTAT10db, "CREATE VIEW FIRSTVIEW AS
SELECT PROD_NO, NAME FROM PRODUCT")
# Practice
PSTAT10db <- dbConnect(RSQLite::SQLite(), "HW_7_db.sqlite")
VIEW1 <-dbSendQuery(PSTAT10db, "CREATE VIEW FIRSTVIEW AS
SELECT PROD_NO, NAME FROM PRODUCT")
sqlite3_close(PSTAT10db)
dbDisconnect(PSTAT10db)
# Practice
PSTAT10db <- dbConnect(RSQLite::SQLite(), "HW_7_db.sqlite")
VIEW1 <-dbSendQuery(PSTAT10db, "CREATE VIEW FIRSTVIEW AS
SELECT PROD_NO, NAME FROM PRODUCT")
dbGetQuery(PSTAT10db, 'SELECT PROD_NO FROM FIRSTVIEW')
VIEW1 <-dbSendQuery(PSTAT10db, "CREATE VIEW FIRSTVIEW AS
SELECT PROD_NO, NAME FROM PRODUCT")
# Practice
PSTAT10db <- dbConnect(RSQLite::SQLite(), "PSTAT10-db.sqlite")
dbGetQuery(PSTAT10db, 'SELECT PROD_NO FROM FIRSTVIEW')
CUSTOMER <- read.csv("CUSTOMER.txt")
DEPARTMENT <- read.csv("DEPARTMENT.txt")
EMPLOYEE <- read.csv("EMPLOYEE.txt")
EMPLOYEE_PHONE <- read.csv("EMPLOYEE_PHONE.txt")
INVOICES <- read.csv("INVOICES.txt")
PRODUCT <- read.csv("PRODUCT.txt")
SALES_ORDER <- read.csv("SALES_ORDER.txt")
SALES_ORDER_LINE <- read.csv("SALES_ORDER_LINE.txt")
STOCK_TOTAL <- read.csv("STOCK_TOTAL.txt")
dbWriteTable(PSTAT10db, "EMPLOYEE", EMPLOYEE)
dbWriteTable(PSTAT10db, "CUSTOMER", CUSTOMER)
dbWriteTable(PSTAT10db, "DEPARTMENT", DEPARTMENT)
dbWriteTable(PSTAT10db, "EMPLOYEE_PHONE", EMPLOYEE_PHONE)
dbWriteTable(PSTAT10db, "INVOICES", INVOICES)
dbWriteTable(PSTAT10db, "PRODUCT", PRODUCT)
dbWriteTable(PSTAT10db, "SALES_ORDER", SALES_ORDER)
dbWriteTable(PSTAT10db, "SALES_ORDER_LINE", SALES_ORDER_LINE)
dbWriteTable(PSTAT10db, "STOCK_TOTAL", STOCK_TOTAL)
VIEW1 <-dbSendQuery(PSTAT10db, "CREATE VIEW FIRSTVIEW AS
SELECT PROD_NO, NAME FROM PRODUCT")
dbGetQuery(PSTAT10db, 'SELECT PROD_NO FROM FIRSTVIEW')
dbClearResult(VIEW1)
dbGetQuery(PSTAT10db, 'SELECT EMPLOYEE.EMP_NO, EMPLOYEE.NAME, DEPARTMENT.MANAGER
FROM
EMPLOYEE INNER JOIN DEPARTMENT WHERE EMPLOYEE.EMP_NO = DEPARTMENT.MANAGER')
another_view <- dbSendQuery(conn = PSTAT10db, 'CREATE VIEW SECONDVIEW AS
SELECT EMPLOYEE.EMP_NO,
EMPLOYEE.NAME, DEPARTMENT.MANAGER
FROM EMPLOYEE JOIN DEPARTMENT
WHERE EMPLOYEE.DEPT_NO = DEPARTMENT.DEPT_NO')
dbClearResult(another_view)
dbGetQuery(PSTAT10db, 'SELECT * FROM SECONDVIEW')
dbSendStatement(conn=PSTAT10db, 'DROP VIEW FIRSTVIEW')
dbSendStatement(conn=PSTAT10db, 'DROP VIEW SECONDVIEW')
DEL_ALEX <- dbSendStatement(PSTAT10db, 'DELETE FROM CUSTOMER
WHERE NAME="ALEX"')
dbGetRowsAffected(DEL_ALEX)
dbGetQuery(PSTAT10db, 'SELECT * FROM CUSTOMER')
dbWriteTable(PSTAT10db, "CUSTOMER", CUSTOMER, overwrite=TRUE)
dbGetQuery(PSTAT10db, 'SELECT * FROM CUSTOMER')
dbDisconnect(PSTAT10db)
data("chickwts")
PSTAT10db <- dbConnect(RSQLite::SQLite(), "PSTAT10-db.sqlite")
dbWriteTable(PSTAT10db, "chickwts", chickwts)
dbListTables(PSTAT10db)
query <- dbGetQuery(PSTAT10db, 'SELECT weight FROM chickwts')
dbFetch(query, n=5)
query
dbFetch(query, n=5)
query <- dbSendQuery(PSTAT10db, 'SELECT weight FROM chickwts')
dbFetch(query, n=5)
dbFetch(query, n=5)
dbFetch(query, n=5)
# B.
dbCountRows(query)
# B.
dbGetRowCount(query)
# C.
dbGetQuery(PSTAT10db, 'SELECT weight, feed FROM chickwts
WHERE (feed = "linseed" AND weight < 300)
OR (feed = "soybeen" AND weight > 300')
# C.
dbGetQuery(PSTAT10db, 'SELECT weight, feed FROM chickwts
WHERE (feed = "linseed" AND weight < 300)
OR (feed = "soybeen" AND weight > 300')
# C.
dbGetQuery(PSTAT10db, 'SELECT weight, feed FROM chickwts
WHERE (feed = "linseed" AND weight < 300)
OR (feed = "soybeen" AND weight > 300)')
# C.
dbGetQuery(PSTAT10db, 'SELECT weight, feed FROM chickwts
WHERE (feed = "linseed" AND weight < 300)
OR (feed = "soybean" AND weight > 300)')
# D.
dbGetQuery(PSTAT10db, 'SELECT MAX(weight), MIN(weight) FROM chickwts
WHERE feed = "soybean"')
# 2.
data("warpbreaks")
dbWriteTable(PSTAT10db, "warpbreaks", warpbreaks)
summary(warpbreaks)
# B.
dbGetQuery(PSTAT10db, 'SELECT breaks FROM warpbreaks
WHERE breaks > 40 AND wool = "A"')
# C.
dbGetQuery(PSTAT10db, 'SELECT COUNT(breaks) FROM warpbreaks
WHERE wool = "A"')
getwd()
# default code chunk options
knitr::opts_chunk$set(echo = F,
results = 'markup',
message = F,
warning = F)
# load packages
library(faraway)
library(tidyverse)
library(tidyverse)
library(dplyr)
faithful %>%
dplyr::select(eruptions) %>% # select eruptions column
filter(eruptions <= 2) %>% # filter eruptions equal to or below 2
slice(1:5) # print out only first 5 rows
faithful %>%
filter(eruptions > 3) %>% # filter eruptions above 3
ggplot() +
# scatterplot with eruptions on x axis and waiting on y
geom_point(aes(x = eruptions, y = waiting),
# red color data points. alpha changes the transparency of the points
color = "red", alpha = 0.7)
faithful %>%
dplyr::select(eruptions) %>% # select eruptions column
filter(eruptions <= 2) %>% # filter eruptions equal to or below 2
slice(1:5) # print out only first 5 rows
faithful %>%
dplyr::select(eruptions) %>% # select eruptions column
filter(eruptions <= 2) %>% # filter eruptions equal to or below 2
slice(1:5) # print out only first 5 rows
help(%>%)
library(tidyverse)
library(dplyr)
faithful %>%
dplyr::select(eruptions) %>% # select eruptions column
filter(eruptions <= 2) %>% # filter eruptions equal to or below 2
slice(1:5) # print out only first 5 rows
faithful %>%
filter(eruptions > 3) %>% # filter eruptions above 3
ggplot() +
# scatterplot with eruptions on x axis and waiting on y
geom_point(aes(x = eruptions, y = waiting),
# red color data points. alpha changes the transparency of the points
color = "red", alpha = 0.7)
faithful %>%
filter(eruptions > 3) %>% # filter eruptions above 3
ggplot() +
# scatterplot with eruptions on x axis and waiting on y
geom_point(aes(x = eruptions, y = waiting),
# red color data points. alpha changes the transparency of the points
color = "red", alpha = 0.7)
help(aes)
library(tidyverse)
library(dplyr)
faithful %>%
dplyr::select(eruptions) %>% # select eruptions column
filter(eruptions <= 2) %>% # filter eruptions equal to or below 2
slice(1:5) # print out only first 5 rows
faithful %>%
filter(eruptions > 3) %>% # filter eruptions above 3
ggplot() +
# scatterplot with eruptions on x axis and waiting on y
geom_point(aes(x = eruptions, y = waiting),
# red color data points. alpha changes the transparency of the points
color = "red", alpha = 0.7)
# concatenation `c()`
c(1, 3, 2, 5)
# assignment `<-`
x <- c(1, 3, 2, 5)
x
# check object structure `str()`
str(x)
# construct a matrix
x_mx <- matrix(x, nrow = 2, byrow = F)
x_mx
# vectorized arithmetic and logic
y <- x + 1
x > y
tinytex::install_tinytex()
knitr::opts_chunk$set(echo = TRUE)
# the data set "trees" is contained in the R package "datasets"
require(datasets)
head(trees)
help(require)
help(head)
# the data set "trees" is contained in the R package "datasets"
require(datasets)
head(trees)
length(trees)
dim(trees)
help(dim)
# the data set "trees" is contained in the R package "datasets"
require(datasets)
head(trees)
reticulate::repl_python()
help(pair)
help(pairs)
pairs(log(Girth), log(Height), log(Volume), data=trees)
pairs(Girth, data=trees)
data(trees)
force(trees)
pairs(Girth, data=trees)
pairs(Girth$trees)
pairs(trees$Girth)
pairs(trees$Girth, trees$Height, trees$Volume)
pairs(c(trees$Girth, trees$Height, trees$Volume))
pairs(c(trees$Girth, trees$Height))
pairs(trees$Girth, trees$Height)
pairs(trees$Girth)
pairs(~Girth + Height + Volume, data=trees)
pairs(~Girth - Height + Volume, data=trees)
pairs(~Girth + Height + Volume, data=trees)
pairs(~Girth - Height + Volume, data=trees)
pairs(~Girth + Height + Volume, data=trees)
pairs(~Girth - Height - Volume, data=trees)
pairs(~ Girth + Height + Volume, data=trees)
pairs(~ log(Girth) + Height + Volume, data=trees)
pairs(~ log(Girth) + log(Height) + log(Volume), data=trees)
help(cor)
cor(trees)
cor(log(trees))
cor(log(trees))
cor(trees)
cor(log(trees))
cor(log(trees))
trees_logged <- data.frame(
log_Girth = log(trees$Girth),
log_Height = log(trees$Height),
log_Volume = log(trees$Volume)
)
cor(trees_logged)
cor(log(trees))
View(trees)
help(lm)
help(abline)
source("~/.active-rstudio-document", echo=TRUE)
R.2 <- 1- sum((fit$residuals)^2 )/(sum((y-mean(y))^2))
source("~/.active-rstudio-document", echo=TRUE)
fit$residuals
Summary(fit)
summary(fit)
knitr::opts_chunk$set(echo = TRUE)
fit <- lm(girth ~ height, data=trees)
view(trees)
View(trees)
fit <- lm(Girth ~ Height, data=trees)
fit <- lm(Girth ~ Height, data=trees)
Summary(fit)
fit <- lm(Girth ~ Height, data=trees)
summary(fit)
fit <- lm(log(Girth) ~ log(Height), data=trees)
summary(fit)
fit <- lm(log(Girth) + log(Height) ~ log(Volume), data=trees)
summary(fit)
fit <- lm(log(Volume) ~ log(Girth) + log(Height), data=trees)
summary(fit)
help(matrix)
x <- matrix(data=c(1, log(Girth), log(Height)), nrow=3, ncol=1, byrow=FALSE)
x <- matrix(data=c(1, log(trees$Girth), log(trees$Height)), nrow=3, ncol=1, byrow=FALSE)
beta_hat <- (transpose(x) * x)^(-1) * transpose(x)
x <- matrix(data=c(1, log(trees$Girth), log(trees$Height)), nrow=3, ncol=length(trees), byrow=FALSE)
x
beta_hat <- (transpose(x) * x)^(-1) * transpose(x)
help(rep)
x <- matrix(data=c(rep(1, times=length(trees)), log(trees$Girth), log(trees$Height)), nrow=3, ncol=length(trees), byrow=FALSE)
x
beta_hat <- (transpose(x) * x)^(-1) * transpose(x)
x <- matrix(data=c(rep(1, times=length(trees)), log(trees$Girth), log(trees$Height)), nrow=length(trees), ncol=3, byrow=TRUE)
x
beta_hat <- (transpose(x) * x)^(-1) * transpose(x)
x <- matrix(data=c(rep(1, times=length(trees)), log(trees$Girth), log(trees$Height)), nrow=length(trees), ncol=3, byrow=FALSE)
x
beta_hat <- (transpose(x) * x)^(-1) * transpose(x)
x
x <- matrix(data=c(rep(1, times=length(trees)), log(trees$Girth), log(trees$Height)), nrow=length(trees), ncol=3, byrow=FALSE)
x <- cbind(rep(1, times=length(trees)), trees$Girth, trees$Height)
x
help(transpose)
beta_hat <- (t(x) * x)^(-1) * t(x)
help(t)
beta_hat <- (t(x) * x)^(-1) * t(x)
beta_hat
t(x)
beta_hat <- (t(x) * x)
beta_hat <- (t(x)*x)
beta_hat
beta_hat <- (x*t(x)
beta_hat <- (x*t(x))
beta_hat
beta.hat <- (x*t(x))
beta.hat
beta.hat <- (t(x)*x)
beta.hat
x <- cbind(rep(1, times=length(trees)), trees$Girth, trees$Height)
beta.hat <- (t(x)*x)
x <- cbind(rep(1, times=length(trees)), trees$Girth, trees$Height)
x
beta.hat <- (t(x)*x)
x <- cbind(rep(1, times=length(trees$Girth)), trees$Girth, trees$Height)
x
beta.hat <- (t(x)*x)
beta.hat <- (t(x) %*% x)
beta.hat
beta.hat <- (t(x) %*% x)^-1
beta.hat
y <- matrix(log(trees$volume))
y <- matrix(log(trees$Volume))
y
y <- matrix(log(trees$Volume), byrow=TRUE)
y
y <- matrix(log(trees$Volume), byrow=FALSE)
y
y
y <- matrix(log(trees$Volume), byrow=TRUE)
y
y <- matrix(log(trees$Volume), byrow=FALSE)
y
y <- matrix(log(trees$Volume))
y
beta.hat <- (t(x) %*% x)^-1 %*% t(x) %*% y
beta.hat
fit <- lm(log(Volume) ~ log(Girth) + log(Height), data=trees)
summary(fit)
x <- cbind(rep(1, times=length(trees$Girth)), log(trees$Girth), log(trees$Height))
y <- matrix(log(trees$Volume))
beta.hat <- (t(x) %*% x)^-1 %*% t(x) %*% y
beta.hat
x <- cbind(rep(1, times=length(trees$Girth)), log(trees$Girth), log(trees$Height))
y <- matrix(log(trees$Volume))
beta.hat <- solve(t(x) %*% x)^-1 %*% t(x) %*% y
beta.hat
x <- cbind(rep(1, times=length(trees$Girth)), log(trees$Girth), log(trees$Height))
y <- matrix(log(trees$Volume))
beta.hat <- solve(t(x) %*% x) %*% t(x) %*% y
beta.hat
beta.hat <- solve(t(x) %*% x) %*% t(x) %*% y
help(solve)
x <- cbind(rep(1, times=length(trees$Girth)), log(trees$Girth), log(trees$Height))
y <- matrix(log(trees$Volume))
beta.hat <- solve(t(x) %*% x) %*% t(x) %*% y
beta.hat2 <- (t(x) %*% x) %*% t(x) %*% y
beta.hat
beta.hat2
x <- cbind(rep(1, times=length(trees$Girth)), log(trees$Girth), log(trees$Height))
y <- matrix(log(trees$Volume))
beta.hat <- solve(t(x) %*% x) %*% t(x) %*% y
beta.hat2 <- (t(x) %*% x) ^-1 %*% t(x) %*% y
beta.hat
beta.hat2
x <- cbind(rep(1, times=length(trees$Girth)), log(trees$Girth), log(trees$Height))
y <- matrix(log(trees$Volume))
beta.hat <- solve(t(x) %*% x) %*% t(x) %*% y
beta.hat2 <- (t(x) %*% x) ^(-1) %*% t(x) %*% y
beta.hat
beta.hat2
x <- cbind(rep(1, times=length(trees$Girth)), log(trees$Girth), log(trees$Height))
y <- matrix(log(trees$Volume))
beta.hat <- solve(t(x) %*% x) %*% t(x) %*% y
beta.hat2 <- solve(t(x) %*% x)^(-1) %*% t(x) %*% y
beta.hat
beta.hat2
x <- cbind(rep(1, times=length(trees$Girth)), log(trees$Girth), log(trees$Height))
y <- matrix(log(trees$Volume))
beta.hat <- solve(t(x) %*% x) %*% t(x) %*% y
beta.hat2 <- solve(t(x) %*% x) ^(-1) %*% t(x) %*% y
beta.hat
beta.hat2
x <- cbind(rep(1, times=length(trees$Girth)), log(trees$Girth), log(trees$Height))
y <- matrix(log(trees$Volume))
beta.hat <- solve(t(x) %*% x) %*% t(x) %*% y
beta.hat
predict(fit)
residuals1 <- fit$residuals
fit$residuals
sigma2 <- sum(fit$residuals^2)/fit$df.residual
sigma2
fit <- lm(log(Volume) ~ 0+ log(Girth) + log(Height), data=trees)
summary(fit)
fit <- lm(log(Volume) ~ log(Girth) + log(Height), data=trees)
summary(fit)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
help(qt)
source("~/.active-rstudio-document", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
data(gala, package ="faraway")
fit<- lm( Species ~ Elevation, data=gala)
sigma2.hat <- sum((fit$residuals^2))/fit$df.residual
sigma2.hat
sigma.hat <- sqrt(sigma2.hat)
x <- gala$Elevation
y <- gala$Species
n <- length(y)
beta1 <- sum((y-mean(y))*(x-mean(x)))/sum((x-mean(x))\^2)
x <- gala$Elevation
y <- gala$Species
n <- length(y)
beta1 <- sum((y-mean(y))*(x-mean(x)))/sum((x-mean(x))^2)
beta1
beta0 <- mean(y)-beta1*mean(x)
beta0
SSR <- sum((fit$residuals)^2); SSR
se.beta1<- sigma.hat/sqrt(sum((x-mean(x))^2))
se.beta1
se.beta0<- sigma.hat*sqrt((1/n+mean(x)^2/sum((x-mean(x))^2)))
se.beta0
help(confit)
help(confint)
CI.beta0 <- c(fit$coefficients[1] - qt(0.975, df=fit$df.residual)*se.beta0, fit*$coefficients[1] + qt(0.975, df=fit$df.residual)*se.beta0)
CI.beta0 <- c(fit$coefficients[1] - qt(0.975, df=fit$df.residual)*se.beta0, fit$coefficients[1] + qt(0.975, df=fit$df.residual)*se.beta0)
CI.beta0
CI.beta1<- c(fit$coefficients[2] - qt(0.975, df=fit$df.residual)*se.beta1,
fit$coefficients[2] + qt(0.975, df=fit$df.residual)*se.beta1)
CI.beta1
confint(fit)
help(pairs)
predict(fit)
fit$residuals
sigma2 <- sum(fit$residuals^2)/fit$df.residual
sigma2
View(cars)
var(fit$coefficients[1])
help(var)
var(fit$coefficient[1])
var(fit)
# the data set "trees" is contained in the R package "datasets"
require(datasets)
head(trees)
install.packages("tinytex")
install.packages("tinytex")
install.packages("tinytex")
install.packages("tinytex")
install.packages("tinytex")
install.packages("Rtools")
knitr::opts_chunk$set(echo = TRUE)
X <- cbind(rep(1,times=length(gala$Area)), gala$Area, gala$Elevation, gala$Scruz, gala$Adjacent)
colnames(X) <- c("Intecept", "Area", "Elevation", "Scruz", "Adjacent")
Beta.hat<- solve(crossprod(X))%*%(t(X)%*%y);t(Beta.hat)
fit1 <- lm(Species ~ Area + Elevation + Scruz + Adjacent, data=gala)
sigma.hat <- sqrt(sum(fit1$residuals^2)/(fit1$df.residual)); sigma.hat
XtX.inverse <- solve(crossprod(X)); XtX.inverse
Beta.hat.SE <- sigma.hat*sqrt(diag(XtX.inverse)); Beta.hat.SE
X <- cbind(rep(1,times=length(gala$Area)), gala$Area, gala$Elevation, gala$Scruz, gala$Adjacent)
colnames(X) <- c("Intecept", "Area", "Elevation", "Scruz", "Adjacent")
Beta.hat<- solve(crossprod(X))%*%(t(X)%*%y);t(Beta.hat)
fit1 <- lm(Species ~ Area + Elevation + Scruz + Adjacent, data=gala)
sigma.hat <- sqrt(sum(fit1$residuals^2)/(fit1$df.residual)); sigma.hat
XtX.inverse <- solve(crossprod(X)); XtX.inverse
Beta.hat.SE <- sigma.hat*sqrt(diag(XtX.inverse)); Beta.hat.SE
fit1$df.residual
summary(fit1)
length(gala)
length(gala$Species)
X <- cbind(rep(1,times=length(gala$Area)), gala$Area, gala$Elevation, gala$Scruz, gala$Adjacent)
colnames(X) <- c("Intecept", "Area", "Elevation", "Scruz", "Adjacent")
Beta.hat<- solve(crossprod(X))%*%(t(X)%*%y)
t(Beta.hat)
fit1 <- lm(Species ~ Area + Elevation + Scruz + Adjacent, data=gala)
sigma.hat <- sqrt(sum(fit1$residuals^2)/(fit1$df.residual))
sigma.hat
XtX.inverse <- solve(crossprod(X))
XtX.inverse
Beta.hat.SE <- sigma.hat*sqrt(diag(XtX.inverse))
Beta.hat.SE
help(anova)
help(pf)
fullmodel<- lm( Species ~ Area+Elevation+ Scruz+ Adjacent, data=gala)
nullmodel <- lm(Species~1, data=gala)
anova1<-anova(nullmodel, fullmodel)
anova1
pval<- 1-pf(anova1$F[2],4,25)
pval
fullmodel<- lm( Species ~ Area+Elevation+ Scruz+ Adjacent, data=gala)
Model1 <- lm(Species~Elevation+ Adjacent, data=gala)
anova2<-anova(Model1, fullmodel)
anova2
pval<- 1-pf(anova2$F[2],2,25)
pval
install.packages("gitcreds")
gitcreds::gitcreds_set()
